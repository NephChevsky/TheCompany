{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Rectangle } from 'src/app/_models/rectangle';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_services/invoice.service\";\nexport let PreviewComponent = /*#__PURE__*/(() => {\n  class PreviewComponent {\n    constructor(invoiceService, elementRef) {\n      this.invoiceService = invoiceService;\n      this.elementRef = elementRef;\n      this.dataSource = \"\";\n      this.id = \"\";\n      this.page = 1;\n      this.imgPosition = new DOMRect();\n      this.dragPosition = new Rectangle(-1, -1, -1, -1);\n      this.selectedPosition = new Rectangle(-1, -1, -1, -1);\n      this.selectedText = \"\";\n      this.extractedTextEvent = new EventEmitter();\n    }\n\n    ngOnInit() {\n      this.canvasCtx = document.getElementById('canvasPreview').getContext('2d');\n\n      if (this.dataSource == \"Invoice\") {\n        this.invoiceService.getPreview(this.id, this.page).subscribe(data => {\n          var binary = '';\n          var bytes = new Uint8Array(data);\n          var len = bytes.byteLength;\n\n          for (var i = 0; i < len; i++) {\n            binary += String.fromCharCode(bytes[i]);\n          }\n\n          this.preview = \"data:image/png;base64,\" + binary;\n          let that = this;\n          document.getElementById(\"imgPreview\").addEventListener('load', function () {\n            that.imgPosition = document.getElementById(\"imgPreview\").getBoundingClientRect();\n          });\n        }, error => {// TODO: handle errors\n        });\n        this.invoiceService.getExtraction(this.id).subscribe(data => {\n          var binary = '';\n          var bytes = new Uint8Array(data);\n          var len = bytes.byteLength;\n\n          for (var i = 0; i < len; i++) {\n            binary += String.fromCharCode(bytes[i]);\n          }\n\n          this.extraction = JSON.parse(decodeURIComponent(atob(binary).split('').map(function (c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n          }).join('')));\n          this.extractionSize = this.extraction[0];\n          this.extraction.shift();\n        }, error => {// TODO: handle errors\n        });\n      }\n    }\n\n    handleClick(event) {\n      if (event.offsetX >= this.selectedPosition.X && event.offsetX <= this.selectedPosition.X + this.selectedPosition.Width && event.offsetY >= this.selectedPosition.Y && event.offsetY <= this.selectedPosition.Y + this.selectedPosition.Height) {\n        this.extractedTextEvent.emit(this.selectedText);\n        this.selectedPosition = new Rectangle(-1, -1, -1, -1);\n        this.selectedText = \"\";\n      } else {\n        this.startDrawing(event);\n      }\n    }\n\n    startDrawing(event) {\n      if (this.extraction && this.extraction.length != 0) {\n        this.selectedPosition = new Rectangle(-1, -1, -1, -1);\n        this.selectedText = \"\";\n        this.dragPosition = new Rectangle(event.offsetX, event.offsetY, 0, 0);\n        let canvasPosition = document.getElementById(\"canvasPreview\").getBoundingClientRect();\n        this.canvasCtx.clearRect(0, 0, canvasPosition.width, canvasPosition.height);\n      }\n    }\n\n    draw(event) {\n      if (this.dragPosition.X != -1) {\n        this.dragPosition.Width = event.offsetX - this.dragPosition.X;\n        this.dragPosition.Height = event.offsetY - this.dragPosition.Y;\n        let canvasPosition = document.getElementById(\"canvasPreview\").getBoundingClientRect();\n        this.canvasCtx.clearRect(0, 0, canvasPosition.width, canvasPosition.height);\n        this.canvasCtx.strokeStyle = 'red';\n        this.canvasCtx.strokeRect(this.dragPosition.X, this.dragPosition.Y, this.dragPosition.Width, this.dragPosition.Height);\n      }\n    }\n\n    stopDrawing(event) {\n      if (this.extraction && this.extraction.length != 0) {\n        var result = this.extractText(this.dragPosition);\n        this.dragPosition = new Rectangle(-1, -1, -1, -1);\n        result.position = this.reversePosition(result.position);\n        result.position.X = result.position.X - 3;\n        result.position.Y = result.position.Y - 3;\n        result.position.Width = result.position.Width + 6;\n        result.position.Height = result.position.Height + 6;\n        let canvasPosition = document.getElementById(\"canvasPreview\").getBoundingClientRect();\n        this.canvasCtx.clearRect(0, 0, canvasPosition.width, canvasPosition.height);\n        this.canvasCtx.fillStyle = '#f9ff87';\n        this.canvasCtx.fillRect(result.position.X, result.position.Y, result.position.Width, result.position.Height);\n        this.canvasCtx.strokeStyle = 'red';\n        this.canvasCtx.lineWidth = 1;\n        this.canvasCtx.strokeRect(result.position.X, result.position.Y, result.position.Width, result.position.Height);\n\n        for (var i = 0; i < result.words.length; i++) {\n          var wordPosition = this.reversePosition(result.words[i]);\n          this.canvasCtx.fillStyle = 'black';\n          this.canvasCtx.fillText(result.words[i].Text, wordPosition.X, wordPosition.Y + wordPosition.Height);\n        }\n\n        this.selectedPosition = result.position;\n        this.selectedText = result.text;\n      }\n    }\n\n    onResize() {\n      this.imgPosition = document.getElementById(\"imgPreview\").getBoundingClientRect();\n    }\n\n    extractText(position) {\n      position = this.convertPosition(position);\n      var resultTxt = \"\";\n      var resultPosition = new Rectangle(-1, -1, -1, -1);\n      var currentLine = -1;\n      var words = [];\n\n      for (var i = 1; i < this.extraction.length; i++) {\n        var left = this.extraction[i].X + this.extraction[i].Width < position.X;\n        var right = this.extraction[i].X > position.X + position.Width;\n        var above = this.extraction[i].Y > position.Y + position.Height;\n        var below = this.extraction[i].Y + this.extraction[i].Height < position.Y;\n\n        if (!(left || right || above || below)) {\n          words.push(this.extraction[i]);\n\n          if (resultTxt) {\n            if (this.extraction[i].Y > currentLine + 1) resultTxt += \"\\r\\n\";else resultTxt += \" \";\n          }\n\n          if (currentLine == -1 || this.extraction[i].Y != currentLine) currentLine = this.extraction[i].Y;\n          resultTxt += this.extraction[i].Text;\n          if (resultPosition.X > this.extraction[i].X || resultPosition.X == -1) resultPosition.X = this.extraction[i].X;\n          if (resultPosition.Y > this.extraction[i].Y || resultPosition.Y == -1) resultPosition.Y = this.extraction[i].Y;\n          if (resultPosition.X + resultPosition.Width < this.extraction[i].X + this.extraction[i].Width || resultPosition.Width == -1) resultPosition.Width = this.extraction[i].X + this.extraction[i].Width - resultPosition.X;\n          if (resultPosition.Y + resultPosition.Height < this.extraction[i].Y + this.extraction[i].Height || resultPosition.Height == -1) resultPosition.Height = this.extraction[i].Y + this.extraction[i].Height - resultPosition.Y;\n        }\n      }\n\n      if (resultPosition.X == -1) {\n        resultPosition = position;\n      }\n\n      var result = {\n        text: resultTxt,\n        position: resultPosition,\n        words: words\n      };\n      return result;\n    }\n\n    convertPosition(position) {\n      var pos = new Rectangle(position.X * this.extractionSize.Width / this.imgPosition.width, position.Y * this.extractionSize.Height / this.imgPosition.height, position.Width * this.extractionSize.Width / this.imgPosition.width, position.Height * this.extractionSize.Height / this.imgPosition.height);\n      return pos;\n    }\n\n    reversePosition(position) {\n      var pos = new Rectangle(position.X * this.imgPosition.width / this.extractionSize.Width, position.Y * this.imgPosition.height / this.extractionSize.Height, position.Width * this.imgPosition.width / this.extractionSize.Width, position.Height * this.imgPosition.height / this.extractionSize.Height);\n      return pos;\n    }\n\n  }\n\n  PreviewComponent.ɵfac = function PreviewComponent_Factory(t) {\n    return new (t || PreviewComponent)(i0.ɵɵdirectiveInject(i1.InvoiceService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  PreviewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PreviewComponent,\n    selectors: [[\"app-preview\"]],\n    hostBindings: function PreviewComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function PreviewComponent_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      dataSource: \"dataSource\",\n      id: \"id\",\n      page: \"page\"\n    },\n    outputs: {\n      extractedTextEvent: \"extractedTextEvent\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[1, \"previewContainer\"], [\"id\", \"imgPreview\", 1, \"imgPreview\", 3, \"src\"], [\"id\", \"canvasPreview\", 1, \"canvasPreview\", 3, \"width\", \"height\", \"pointerdown\", \"pointerup\", \"pointermove\"]],\n    template: function PreviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"img\", 1);\n        i0.ɵɵelementStart(2, \"canvas\", 2);\n        i0.ɵɵlistener(\"pointerdown\", function PreviewComponent_Template_canvas_pointerdown_2_listener($event) {\n          return ctx.handleClick($event);\n        })(\"pointerup\", function PreviewComponent_Template_canvas_pointerup_2_listener($event) {\n          return ctx.stopDrawing($event);\n        })(\"pointermove\", function PreviewComponent_Template_canvas_pointermove_2_listener($event) {\n          return ctx.draw($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"src\", ctx.preview, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"width\", ctx.imgPosition.width)(\"height\", ctx.imgPosition.height);\n      }\n    },\n    styles: [\".previewContainer[_ngcontent-%COMP%]{display:inline-block;height:100%;width:100%;position:relative;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.imgPreview[_ngcontent-%COMP%]{height:100%;position:absolute;z-index:1}.canvasPreview[_ngcontent-%COMP%]{position:relative;z-index:20}\"]\n  });\n  return PreviewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}