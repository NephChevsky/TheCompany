{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from '../_models/user';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || \"{}\"));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    storeUser(user) {\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      return user;\n    }\n\n    register(user) {\n      return this.http.post(environment.baseUrl + `User/Register`, user).pipe(map(user => {\n        return this.storeUser(user);\n      }));\n    }\n\n    login(user) {\n      return this.http.post(environment.baseUrl + `User/Login`, user).pipe(map(user => {\n        return this.storeUser(user);\n      }));\n    }\n\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(new User());\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}