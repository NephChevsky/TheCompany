{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(userService, router, toastr) {\n      this.userService = userService;\n      this.router = router;\n      this.toastr = toastr;\n    }\n\n    intercept(request, next) {\n      const currentUser = this.userService.currentUserValue;\n\n      if (currentUser && currentUser.token) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${currentUser.token}`\n          }\n        });\n      }\n\n      return next.handle(request).pipe(catchError(err => {\n        debugger;\n\n        if (err.status === 401) {\n          this.userService.logout();\n          this.router.navigate(['/Login']);\n        } else if (err.status === 0 && err.name === \"HttpErrorResponse\") {\n          this.toastr.error(\"Couldn't reach server\");\n        }\n\n        return throwError(err);\n      }));\n    }\n\n  }\n\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n  };\n\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n  return JwtInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}